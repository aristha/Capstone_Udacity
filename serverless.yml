
org: tamhv
app: serverless-order-management-app
service: serverless-order-management-app

plugins:
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-offline
  - serverless-dynamodb-local

configValidationMode: warn

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    ORDERS_TABLE: Jobs-${self:provider.stage}
    ORDERS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: tamhv2-serverless-order-management-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    IS_OFFLINE: true

  logs:
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

custom:
  serverless-offline:
    httpPort: 8082
  dynamodb:
    start:
      port: 8001
      inMemory: true
      migrate: true
    stages: 
      - dev
  documentation: 
    api: 
      info: 
        version: v1.0.0
        title: Order Management API
        description: Serverless Order Management
    models: 
      - name: CreateOrder
        contentType: application/json
        schema: ${file(models/create-order-model.json)}
      - name: UpdateRequest
        contentType: application/json
        schema: ${file(models/update-order-model.json)}
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ORDERS_TABLE}
  # Provide 
  GetJobs:
    handler: src/lambda/http/getOrders.handler
    events:
      - http:
          method: get
          path: jobs
          cors:
            origin: '*'
          authorizer: Auth
    iamRoleStatements:
        - Effect: Allow 
          Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
          Resource:
            - "*"
        - Effect: Allow
          Action:
            - dynamodb:Query
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ORDERS_TABLE}

  CreateTodo:
    handler: src/lambda/http/createOrder.handler
    events:
      - http:
          method: post
          path: jobs
          cors: 
            origin: '*'
          authorizer: Auth
          reqValidatorName: Validator
          documentation: 
            summary: Create a Job
            description: Create a Job
            requestModels: 
              'application/json': CreateRequest
    iamRoleStatements:
      - Effect: Allow 
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ORDERS_TABLE}

  UpdateOrder:
    handler: src/lambda/http/updateOrder.handler
    events:
      - http:
          method: patch
          path: orders/{orderId}
          cors:
            origin: '*'
          authorizer: Auth
          reqValidatorName: Validator
          documentation: 
            summary: update order
            description: Update order
            requestModels: 
              'application/json': UpdateOrder
    iamRoleStatements:
      - Effect: Allow 
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ORDERS_TABLE}

  DeleteOrder:
    handler: src/lambda/http/deleteOrder.handler
    events:
      - http:
          method: delete
          path: orders/{orderId}
          cors:
            origin: '*'
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow 
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ORDERS_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors:
            origin: '*'
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow 
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - s3:PutObject 
          - s3:GetObject 
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ORDERS_TABLE}
resources:
  Resources:
    Validator:
      Type: AWS::ApiGateway::RequestValidator
      Properties: 
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    # TODO: Create a DynamoDB table with local secondary index and a composite key
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: orderId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: orderId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ORDERS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.JOBS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL 

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AttachmentsBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Action: 's3:*'
            Principal: '*'
            Effect: Allow
            Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
